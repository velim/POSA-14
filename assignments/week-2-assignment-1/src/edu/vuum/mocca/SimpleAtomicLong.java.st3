package edu.vuum.mocca;

import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;

/**
 * @class SimpleAtomicLong
 *
 * @brief This class implements a subset of the
 *        java.util.concurrent.atomic.SimpleAtomicLong class using a
 *        ReentrantReadWriteLock to illustrate how they work.
 */
class SimpleAtomicLong
{
    /**
     * The value that's manipulated atomically via the methods.
     */
    private long mValue;
    
    /**
     * The ReentrantReadWriteLock used to serialize access to mValue.
     */

    // TODO -- you fill in here by replacing the null with an
    // initialization of ReentrantReadWriteLock.
    // Note: use unfair lock (i.e. false) as code takes longer to execute with fair (i.e. true). 
    private ReentrantReadWriteLock mRWLock = new ReentrantReadWriteLock(false);

    /**
     * Creates a new SimpleAtomicLong with the given initial value.
     */
    public SimpleAtomicLong(long initialValue)
    {
        // TODO -- you fill in here
    	final Lock wLock = mRWLock.writeLock();	// define write lock
    	
    	wLock.lock();					// acquire write lock
    	
    	try {
    		mValue = initialValue;		// set initial value
    	}
    	finally {
    		wLock.unlock();				// release lock
    	}
    }

    /**
     * @brief Gets the current value.
     * 
     * @returns The current value
     */
    public long get()
    {
        long value;

        // TODO -- you fill in here
    	final Lock rLock = mRWLock.readLock();	// define read lock
    	
    	rLock.lock();				// acquire read lock
    	
    	try {
            value = mValue;			// get value
    	}
    	finally {
    		rLock.unlock();			// release lock
    	}

        return value;
    }

    /**
     * @brief Atomically decrements by one the current value
     *
     * @returns the updated value
     */
    public long decrementAndGet()
    {
        long value = 0;

        // TODO -- you fill in here
    	final Lock wLock = mRWLock.writeLock();	// define write lock

    	wLock.lock();				// acquire write lock
    	
    	try {
            mValue--;   			// decrement...
            value = mValue;			// ...and get
    	}
    	finally {
    		wLock.unlock();			// release lock
    	}

        return value;
    }

    /**
     * @brief Atomically increments by one the current value
     *
     * @returns the previous value
     */
    public long getAndIncrement()
    {
        long value = 0;

        // TODO -- you fill in here
    	final Lock wLock = mRWLock.writeLock();	// define write lock

    	wLock.lock();				// acquire write lock
    	
    	try {
            value = mValue;			// get...
            mValue++;				// ...and increment
    	}
    	finally {
    		wLock.unlock();			// release lock
    	}
        
        return value;
    }

    /**
     * @brief Atomically decrements by one the current value
     *
     * @returns the previous value
     */
    public long getAndDecrement()
    {
        long value = 0;

        // TODO -- you fill in here
    	final Lock wLock = mRWLock.writeLock();	// define write lock

    	wLock.lock();				// acquire write lock
    	
    	try {
            value = mValue;			// get...
            mValue--;				// ...and decrement
    	}
    	finally {
    		wLock.unlock();			// release lock
    	}
        
        return value;
    }

    /**
     * @brief Atomically increments by one the current value
     *
     * @returns the updated value
     */
    public long incrementAndGet()
    {
        long value = 0;

        // TODO -- you fill in here
    	final Lock wLock = mRWLock.writeLock();	// define write lock

    	wLock.lock();				// acquire write lock
    	
    	try {
            mValue++;			   	// increment...
            value = mValue;  		// ...and get
    	}
    	finally {
    		wLock.unlock();			// release lock
    	}
        
        return value;
    }
}

